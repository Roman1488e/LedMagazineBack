using LedMagazineBack.Models.TelegramModel;
using LedMagazineBack.Repositories.BasicRepositories.Abstract;
using LedMagazineBack.Services.TelegramServices.Abstract;
using Microsoft.Extensions.Options;

namespace LedMagazineBack.Services.TelegramServices;

using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

public class TelegramService(HttpClient httpClient, IOptions<TelegramSettings> options, IUnitOfWork unitOfWork) : ITelegramService
{
    private readonly TelegramSettings _settings = options.Value;
    private readonly HttpClient _httpClient = httpClient;
    private readonly IUnitOfWork _unitOfWork = unitOfWork;

    public async Task SendMessageAsync(string message)
    {
        if (string.IsNullOrEmpty(_settings.BotToken) || _settings.ChatIds.Count == 0)
            return;

        foreach (var chatId in _settings.ChatIds)
        {
            var url = $"https://api.telegram.org/bot{_settings.BotToken}/sendMessage";

            var payload = new
            {
                chat_id = chatId,
                text = message,
                parse_mode = "HTML"
            };

            var content = new StringContent(
                JsonSerializer.Serialize(payload),
                Encoding.UTF8,
                "application/json");

            var response = await _httpClient.PostAsync(url, content);

            if (response.IsSuccessStatusCode) continue;
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {error}");
        }
    }
    
    public async Task GenerateMessageAsync(Guid orderId)
    {
        var order = await _unitOfWork.OrderRepository.GetById(orderId);

        var message = new StringBuilder();
        message.AppendLine($"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order.OrderNumber}");
        message.AppendLine($"üÜî ID –∑–∞–∫–∞–∑–∞: {order.Id}");
        message.AppendLine($"\nüïí –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {order.Created:dd.MM.yyyy HH:mm}");
        message.AppendLine($"\nüë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:");
        message.AppendLine($"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order.PhoneNumber ?? "–Ω–µ —É–∫–∞–∑–∞–Ω"}");
        message.AppendLine($"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {order.OrganisationName ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}");
        message.AppendLine($"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order.TotalPrice} —Å—É–º");
        message.AppendLine("\nüìã –¢–æ–≤–∞—Ä—ã:");

        foreach (var item in order.Items)
        {
            message.AppendLine($"üñ•Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {item.ProductName}");
            message.AppendLine($"üíµ –¶–µ–Ω–∞: {item.Price} —Å—É–º");
            message.AppendLine($"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞: {item.RentTime?.RentSeconds} —Å–µ–∫—É–Ω–¥");
            message.AppendLine($"üìÖ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {item.RentTime?.RentMonths} –º–µ—Å—è—Ü–µ–≤");
            message.AppendLine("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ");
        }

        await SendMessageAsync(message.ToString());
    }
}

